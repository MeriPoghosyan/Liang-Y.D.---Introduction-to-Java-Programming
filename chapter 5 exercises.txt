Additional Tasks----------------------------------------------------------------------------------------------------------------------

#1 guessing the number in max 7 steps
--------------------------
package com.company;

import java.util.Scanner;

public class Main {

    public static void main(String[] args) {
        int min = 1;
        int max = 100;
        int seeking_number = 50;
        int i = 1;
        Scanner input1 = new Scanner(System.in);
        System.out.println("Let us start the game!!!\nRules: I will guess your number in maximum 7 steps for which you need to answer my questions.\n");

        int answer;
        do {
            if (i > 7) {
                System.out.println("You Lied!!!");
                break;
            }

            System.out.println("Question " + i + ": If " + seeking_number + " is less than your number press 1:\t More than press 2:\t Equal press 0:");
            answer = input1.nextInt();
            if (answer == 1) {
                min = seeking_number;
                seeking_number = (max + seeking_number + 1) / 2;
                ++i;
            } else if (answer == 2) {
                max = seeking_number;
                seeking_number = (seeking_number + min + 1) / 2;
                ++i;
            }
        } while(answer != 0);

        System.out.println("I found it!! Your number is " + seeking_number);
    }
}
--------------------------


#2 Multiplication quizz
--------------------------
package com.company;


import java.util.Scanner;

public class Main {

    public static void main(String[] args) {
        int first_number, second_number, answer, mark=0;

        Scanner input1 = new Scanner(System.in);
        System.out.println("Let us check your basic knowledge in Mathematics:\nYou are going to answer 10 question of multiplication problem after which the program will show you the level of your knowledge:");

        for(int i = 1; i<=10; i++){
            first_number = (int) (1+(Math.random() * 10));
            second_number = (int) (1+(Math.random() * 10));
            System.out.println("Question " + i + ": What is " +  first_number+"*"+second_number + ": ");
            answer = input1.nextInt();
            if (answer==first_number*second_number) mark++;
        }

        switch (mark) {
            case 10 -> System.out.println("Very Good!!!");
            case 9 -> System.out.println("Good!!");
            case 8, 7 -> System.out.println("Sufficient!");
            default -> System.out.println("Bad(( You should study more. ");
        }
        System.out.println("Your mark is " + mark + "/10");
    }
}
--------------------------



From Book-----------------------------------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------------------------------------------
Chapter 5-----------------------------------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------------------------------------------

#1 (Count positive and negative numbers and compute the average of numbers) 
Write a program that reads an unspecified number of integers, determines how 
many positive and negative values have been read, and computes the total and average of the input values (not counting zeros). Your program ends with the input 
0. Display the average as a floating-point number.
--------------------------
package com.company;


import java.util.Scanner;

public class Main {

    public static void main(String[] args) {
        int positive_numbers = 0, negative_numbers = 0, sum = 0, count = 0, number_input;

        Scanner input = new Scanner(System.in);
        System.out.println("Enter an integer, the input ends if it is 0: ");

        while((number_input = input.nextInt())!=0){
            sum+=number_input;
            count++;
            if(number_input<0) negative_numbers++;
            else positive_numbers++;
        }

        if (count == 0) System.out.println("No numbers are entered except 0");
        else System.out.println("The number of positives is " + positive_numbers + "\nThe number of negatives is " + negative_numbers + "\nThe total is " + sum + "\nThe average is " + (float)sum/count);
    }
}
--------------------------


#2 (Repeat additions) Listing 5.4, SubtractionQuizLoop.java, generates five 
random subtraction questions. Revise the program  to generate 10 random addition questions for two integers between 1 and 15. Display the correct count and 
test time.
--------------------------
package com.company;

import java.util.Scanner;

public class Main {

    public static void main(String[] args) {
        int first_number, second_number, answer, mark=0;
        long start_time =  System.currentTimeMillis(), end_time;

        Scanner input1 = new Scanner(System.in);
        System.out.println("Let us check your basic knowledge in Mathematics:\nYou are going to answer 10 questions of subtraction problems after which the program will show you the level of your knowledge:");
        for(int i = 1; i<=10; i++){
            first_number = (int) (1+(Math.random() * 15));
            second_number = (int) (1+(Math.random() * 15));
            System.out.println("Question " + i + ": What is " +  first_number+"-"+second_number + ": ");

            answer = input1.nextInt();
            if (answer==first_number-second_number) mark++;
        }
        end_time = System.currentTimeMillis();
        System.out.println("Your mark is " + mark + "/10\nThe time spent: " + (end_time - start_time) / 1000 + " seconds");
    }
}
--------------------------


#3 (Conversion from kilograms to pounds) Write a program that displays the following table (note 1 kilogram is 2.2 pounds):
Kilograms Pounds
1   2.2
3   6.6
. . .
197 433.4
199 437.8
--------------------------
package com.company;


public class Main {

    public static void main(String[] args) {
        double kg_into_pounds = 2.2;
        System.out.println("Kilograms\tPounds");
        for(double i = 1; i<=199; i+=2) System.out.println((int)i + "\t\t\t" + String.format("%.1f", i*kg_into_pounds));
    }
}
--------------------------


#4 (Conversion from miles to kilometers) Write a program that displays the following table (note 1 mile is 1.609 kilometers):
Miles Kilometers
1 1.609
2 3.218
. . .
9 14.481
10 16.090
--------------------------
package com.company;


public class Main {

    public static void main(String[] args) {
        double mile_for_kilometer = 1.609;
        System.out.println("Miles\tKilometers");
        for(double i = 1; i<=10; i++) System.out.println((int)i + "\t\t\t" + String.format("%.3f", i*mile_for_kilometer));
    }
}
--------------------------



#5 (Conversion from kilograms to pounds and pounds to kilograms) Write a program that displays the following two tables side by side:
Kilograms Pounds | Pounds Kilograms
1   2.2 | 20   9.09
3   6.6 | 25  11.36
. . .
197 433.4 | 510 231.82
199 437.8 | 515 234.09
--------------------------
package com.company;


public class Main {

    public static void main(String[] args) {
        double pounds_for_kilogram = 2.2, k=20;
        System.out.println("Kilograms\tPound\t|\tPound\tKilogram");
        for(double i = 1; i<=199; i+=2,  k+=5) System.out.println((int)i + "\t\t\t" + String.format("%.1f", i*pounds_for_kilogram) + "\t|\t" + (int)k + "\t\t\t" + String.format("%.2f", k/pounds_for_kilogram));
  
    }
}
--------------------------



#6 (Conversion from miles to kilometers) Write a program that displays the following two tables side by side:
Miles Kilometers | Kilometers Miles
1 1.609 | 20 12.430
2 3.218 | 25 15.538
. . .
9 14.481 | 60 37.290
10 16.090 | 65 40.398
--------------------------
package com.company;


public class Main {

    public static void main(String[] args) {
        double kilometers_for_miles = 1.609, k=20;
        System.out.println("Miles\tKilometers\t|\tKilometers\tMiles");
        for(double i = 1; i<=10; i++,k+=5) System.out.println((int)i + "\t\t\t" + String.format("%.3f", i*kilometers_for_miles) + "\t|\t" + (int)k + "\t\t\t" + String.format("%.3f", k/kilometers_for_miles));
    }
}
--------------------------



#7 (Financial application: compute future tuition) Suppose the tuition for a university is $10,000 this year and increases 5% every year. In one year, the tuition will 
be $10,500. Write a program that displays the tuition in 10 years, and the total 
cost of four years’ worth of tuition starting after the tenth year.
--------------------------
package com.company;

import java.util.Scanner;

public class Main {

    public static void main(String[] args) {
        int tuition =  10000;
        System.out.println("the tuition for the next 10 years is down below:");
        for(int i = 1; i<=11; i++){
            tuition = (tuition*105)/100;
            if (i==10)
                System.out.println("\nAfter " + i + " years the Tuition is: $" + tuition);
            if (i==11)
                System.out.println("The total cost of four years is: $"+ tuition);
        }
    }
}
--------------------------



#8 Find the highest score) Write a program that prompts the user to enter the number of students and each student’s name and score, and finally displays the name 
of the student with the highest score. Use the next() method in the Scanner
class to read a name, rather than using the nextLine() method. Assume that the 
number of students is at least 1.
--------------------------
package com.company;

import java.util.Scanner;

public class Main {

    public static void main(String[] args) {
        Scanner input = new Scanner(System.in);
        double mark;
        int numberOfStudents;
        double max = 0;
        String bestStudent = "";
        String name;
        System.out.println("Enter the number of students: ");
        numberOfStudents = input.nextInt();
        if (numberOfStudents >= 1) {
            for (int i = 0; i < numberOfStudents; i++) {
                System.out.println("\nEnter the name of the student: ");
                name = input.next();
                System.out.println("Enter the mark he got: ");
                mark = input.nextDouble();
                if (mark > max) {
                    max = mark;
                    bestStudent = name;
                }
            }
            System.out.println("The best student is " + bestStudent);
        } else
            System.out.println("The number of students should be at least 1");

    }
}
--------------------------



#9 (Find the two highest scores) Write a program that prompts the user to enter the 
number of students and each student’s name and score, and finally displays the 
student with the highest score and the student with the second-highest score. Use 
the next() method in the Scanner class to read a name rather than using the 
nextLine() method. Assume that the number of students is at least 2.
--------------------------
package com.company;

import java.util.Scanner;

public class Main {

    public static void main(String[] args) {
        Scanner input = new Scanner(System.in);
        double mark;
        int numberOfStudents;
        double firstPlace = 0;
        double secondPlace = 0;
        String bestStudent = "";
        String secondStudent = "";
        String name;
        System.out.println("Enter the number of students: ");
        numberOfStudents = input.nextInt();
        if (numberOfStudents >= 2) {
            for (int i = 0; i < numberOfStudents; i++) {
                System.out.println("\nEnter the name of the student: ");
                name = input.next();
                System.out.println("Enter the mark he/she got: ");
                mark = input.nextDouble();
                if (mark > firstPlace) {
                    secondPlace = firstPlace;
                    firstPlace = mark;
                    secondStudent = bestStudent;
                    bestStudent = name;
                }
                else if(mark > secondPlace){
                    secondPlace = mark;
                    secondStudent = name;
                }
            }
            System.out.println("First place: " + bestStudent + "\nSecond place: " + secondStudent);
        } else
            System.out.println("The number of students should be at least 2");

    }
}
--------------------------



#10 Find numbers divisible by 5 and 6) Write a program that displays all the numbers from 100 to 1,000 (10 per line) that are divisible by 5 and 6. Numbers are 
separated by exactly one space.
--------------------------
package com.company;


public class Main {

    public static void main(String[] args) {
        int k = 0;
        for (int i = 100; i <= 1000; i++) {
            if (i % 6 == 0 && i % 5 == 0) {
                System.out.print(i + " ");
                k++;
                if (k % 10 == 0)
                    System.out.println();
            }
        }
    }
}
--------------------------



#11 Find numbers divisible by 5 or 6, but not both) Write a program that displays 
all the numbers from 100 to 200 (10 per line) that are divisible by 5 or 6, but not 
both. Numbers are separated by exactly one space.
--------------------------
package com.company;


public class Main {

    public static void main(String[] args) {
        int k = 0;
        for (int i = 100; i <= 200; i++) {
            if ((i % 6 == 0 || i % 5 == 0) && !(i % 6 == 0 && i % 5 == 0)) {
                System.out.print(i + " ");
                k++;
                if (k % 10 == 0)
                    System.out.println();
            }
        }
    }
}
--------------------------



#12 (Find the smallest n such that n2 > 12,000) Use a while loop to find the smallest integer n such that n2
 is greater than 12,000.
--------------------------
package com.company;


public class Main {

    public static void main(String[] args) {
        int n = 0;
        while (n * n <= 1200)
            n++;
        System.out.println(n);
    }
}
--------------------------



#13 (Find the largest n such that n3 6 12,000) Use a while loop to find the largest 
integer n such that n3
 is less than 12,000.
--------------------------
package com.company;


public class Main {

    public static void main(String[] args) {
        int n = 0;
        while (n * n * n <= 12000)
            n++;
        System.out.println(n - 1);
    }
}
--------------------------



#14 (Compute the greatest common divisor). Write a program that prompts the user to 
enter two positive integers and displays the gcd.
--------------------------
package com.company;


import java.util.Scanner;

public class Main {

    public static void main(String[] args) {
        Scanner input = new Scanner(System.in);
        int firstNumber;
        int secondNumber;
        int minimum;
        int gcd = 1;
        System.out.println("Enter the first number: ");
        firstNumber = input.nextInt();
        System.out.println("Enter the second number: ");
        secondNumber = input.nextInt();
        minimum = Math.min(firstNumber, secondNumber);
        for (int i = minimum; i > 0; i--) {
            if (firstNumber % i == 0 && secondNumber % i == 0) {
                gcd = i;
                break;
            }
        }
        System.out.println("The GCD is " + gcd);
    }
}
--------------------------



#15 (Display the ASCII character table) Write a program that prints the characters in 
the ASCII character table from ! to ~. Display 10 characters per line. The ASCII 
table is given in Appendix B. Characters are separated by exactly one space.
--------------------------
package com.company;


public class Main {

    public static void main(String[] args) {
        int k = 0;
        for (int i = 33; i <= 126; i++) {

                System.out.print((char)i + " ");
                k++;
                if (k % 10 == 0)
                    System.out.println();

        }
    }
}
--------------------------



#16 (Find the factors of an integer) Write a program that reads an integer and displays all its smallest factors in an increasing order. For example, if the input 
integer is 120, the output should be as follows: 2, 2, 2, 3, 5.
--------------------------
package com.company;


import java.util.Scanner;

public class Main {

    public static void main(String[] args) {
        Scanner input = new Scanner(System.in);
        int number;
        System.out.println("Enter a number to see the smallest factors in an increasing order");
        number = input.nextInt();
        for (int divisor = 2; number / divisor >= 1; divisor++) {
            while (number % divisor == 0) {
                System.out.println(divisor);
                number = number / divisor;
            }
        }
    }
}
--------------------------



#17 (Display pyramid) Write a program that prompts the user to enter an integer from 
1 to 15 and displays a pyramid, as presented in the following sample run:
Pattern A Pattern B Pattern C Pattern D

Enter the number of lines: 7
 		  1
 	      2 1 2
 	    3 2 1 2 3
 	  4 3 2 1 2 3 4
 	5 4 3 2 1 2 3 4 5
    6 5 4 3 2 1 2 3 4 5 6
  7 6 5 4 3 2 1 2 3 4 5 6 7
--------------------------
package com.company;


import java.util.Scanner;

public class Main {

    public static void main(String[] args) {
        Scanner input = new Scanner(System.in);
        int numberOfLines;
        System.out.println("How many lines you would like for the pyramid (1-15)");
        numberOfLines = input.nextInt();
        if (1 <= numberOfLines && numberOfLines <= 15) {
            for (int i = 1; i <= numberOfLines; i++) {
                for (int k = numberOfLines; k > i; k--)
                    System.out.print("  ");
                for (int k = i; k > 0; k--)
                    System.out.print(k + " ");
                for (int k = 2; k <= i; k++)
                    System.out.print(k + " ");
                System.out.println();
            }
        } else
            System.out.println("Please follow the restrictions for entering the lines number");
    }
}
--------------------------



#18 (Display four patterns using loops) Use nested loops that display the following 
patterns in four separate programs
Pattern A.        Pattern B.        Pattern C.        Pattern D.        
1                 1 2 3 4 5 6                 1       1 2 3 4 5 6
1 2               1 2 3 4 5                 2 1         1 2 3 4 5
1 2 3             1 2 3 4                 3 2 1           1 2 3 4
1 2 3 4           1 2 3                 4 3 2 1             1 2 3
1 2 3 4 5         1 2                 5 4 3 2 1               1 2
1 2 3 4 5 6       1                 6 5 4 3 2 1                 1
--------------------------
A.
--------------------------
package com.company;


public class Main {

    public static void main(String[] args) {

        for (int i = 1; i <= 6; i++) {
            for (int k = 1; k <= i; k++)
                System.out.print(k + " ");
            System.out.println();
        }
    }
}
--------------------------
B.
--------------------------
package com.company;


public class Main {

    public static void main(String[] args) {

        for (int i = 6; i >= 1; i--) {
            for (int k = 1; k <= i; k++)
                System.out.print(k + " ");
            System.out.println();
        }
    }
}
--------------------------
C.
--------------------------
package com.company;


public class Main {

    public static void main(String[] args) {
        
        for (int i = 1; i <= 6; i++) {
            for (int k = 6; k > i; k--)
                System.out.print("  ");
            for (int k = i; k > 0; k--)
                System.out.print(k + " ");
            System.out.println();
        }
    }
}
--------------------------
D.
--------------------------
package com.company;


public class Main {

    public static void main(String[] args) {

        for (int i = 6; i >= 1; i--) {
            for (int k = 6; k > i; k--)
                System.out.print("  ");
            for (int k = 1; k <= i; k++)
                System.out.print(k + " ");
            System.out.println();
        }
    }
}
--------------------------



#19 (Display numbers in a pyramid pattern) Write a nested for loop that prints the 
following output:
			     1
		         1   2   1
		     1   2   4   2   1
                 1   2   4   8   4   2   1
	     1   2   4   8  16   8   4   2   1
         1   2   4   8  16  32  16   8   4   2   1
     1   2   4   8  16  36  64  32  16   8   4   2   1
 1   2   4   8  16  32  64 128  64  32  16   8   4   2   1
--------------------------
//I completed the task in two versions one of which is the basic solution which didn't really correspond to the given picture (it was align right but the outcome was align left) that is why i've tried to make it more similar to the picture given
----------------------------------first  version----------------------------------
package com.company;


public class Main {
    public static void main(String[] args) {

        for (int i = 0; i < 8; i++) {
            for (int k = 8 * 4; k > i * 4; k--)
                System.out.print(" ");

            for (int k = 0; k <= i; k++)
                System.out.print((int) Math.pow(2, k) + "\t");

            for (int k = i - 1; k >= 0; k--)
                System.out.print((int) Math.pow(2, k) + "\t");

            System.out.println();
        }
    }
}

----------------------------------second version----------------------------------
package com.company;


public class Main {
    // All the "if else" statements in loops are done to keep the similarity of the outcome with the task image. I believe there exists some other methods which are easier and faster and about which I don't know yet
    public static void main(String[] args) {

        for (int i = 0; i < 8; i++) {
            for (int k = 8 * 4; k > i * 4; k--)
                System.out.print(" ");

            for (int k = 0; k <= i; k++) {
                if ((int) Math.pow(2, k) >= 100)
                    System.out.print(" ");
                else if ((int) Math.pow(2, k) < 100 && (int) Math.pow(2, k) >= 10)
                    System.out.print("  ");
                else
                    System.out.print("   ");
                System.out.print((int) Math.pow(2, k));
            }

            for (int k = i - 1; k >= 0; k--) {
                if ((int) Math.pow(2, k) >= 100)
                    System.out.print(" ");
                else if ((int) Math.pow(2, k) < 100 && (int) Math.pow(2, k) >= 10)
                    System.out.print("  ");
                else
                    System.out.print("   ");
                System.out.print((int) Math.pow(2, k));
            }
                
            System.out.println();
        }
    }
}
--------------------------



#20 (Display prime numbers between 2 and 1,000) Display all the prime numbers between 2 and 1,000, inclusive. Display eight 
prime numbers per line. Numbers are separated by exactly one space
--------------------------
package com.company;


public class Main {
    public static void main(String[] args) {
        boolean isPrime;
        int lineNumber = 0;
        for (int i = 2; i <= 1000; i++) {
            isPrime = true;
            for (int k = 2; k <= i / 2; k++) {
                if (i % k == 0) {
                    isPrime = false;
                    break;
                }
            }
            if (isPrime) {
                System.out.print(i + " ");
                lineNumber++;
                if (lineNumber % 8 == 0) System.out.println();
            }
        }
    }
}
--------------------------



#21 (Financial application: compare loans with various interest rates) Write a program that lets the user enter the loan amount and loan period in number of years, 
and displays the monthly and total payments for each interest rate starting from 
5% to 8%, with an increment of 1/8. Here is a sample run:
Loan Amount: 10000
Number of Years: 5
Interest Rate Monthly Payment Total Payment
5.000%   188.71 	    11322.74
5.125%   189.29 	    11357.13
5.250%   189.86 	    11391.59
...
7.875%   202.17 	    12129.97
8.000%   202.76 	    12165.84
--------------------------
package com.company;


import java.util.Scanner;

public class Main {
    public static void main(String[] args) {
        Scanner input = new Scanner(System.in);

        double monthlyPayment;
        double loanAmount;
        double interestRate;
        int numberOfYears;
        System.out.print("Loan Amount: ");
        loanAmount = input.nextDouble();
        System.out.print("Number of Years: ");
        numberOfYears = input.nextInt()*12;
        System.out.println("Interest Rate\tMonthly Payment\tTotal Payment");
        for(double i = 5; i<=8;i+=0.125) {
            interestRate = i / 100 / 12;
            monthlyPayment = loanAmount / ((Math.pow((1 + interestRate), numberOfYears) - 1) / (interestRate * Math.pow((1 + interestRate), numberOfYears)));
            System.out.println(String.format("%.3f",i) + "%\t\t\t" + String.format("%.2f",monthlyPayment) + "\t\t\t" + String.format("%.2f",monthlyPayment*numberOfYears));
        }
    }

}
--------------------------



#22 (Financial application: loan amortization schedule) The monthly payment for a given 
loan pays the principal and the interest. The monthly interest is computed by multiplying
the monthly interest rate and the balance (the remaining principal). The principal
paid for the month is therefore the monthly payment minus the monthly interest. Write 
a program that lets the user enter the loan amount, number of years, and interest rate 
then displays the amortization schedule for the loan. Here is a sample run:

Loan Amount: 10000 
Number of Years: 1 
Annual Interest Rate: 7 
Monthly Payment: 865.26
Total Payment: 10383.21
Payment# Interest Principal Balance
1        58.33 	806.93    9193.07
2 	   53.62 	811.64    8381.43
...
11 	   10.00 	855.26    860.27
12 	   5.01 	860.25    0.01
--------------------------
package com.company;


import java.util.Scanner;

public class Main {
    public static void main(String[] args) {
        Scanner input = new Scanner(System.in);
        double totalPayment;
        double monthlyPayment;
        double loanAmount;
        double interestRate;
        int numberOfYears;
        double interest;
        double principal;

        System.out.print("Loan Amount: ");
        loanAmount = input.nextDouble();
        System.out.print("Number of Years: ");
        numberOfYears = input.nextInt() * 12;
        System.out.print("Interest Rate: ");

        interestRate = input.nextDouble() / 100 / 12;
        monthlyPayment = loanAmount / ((Math.pow((1 + interestRate), numberOfYears) - 1) / (interestRate * Math.pow((1 + interestRate), numberOfYears)));
        totalPayment = monthlyPayment * numberOfYears;

        System.out.println("Monthly Payment: " + String.format("%.2f", monthlyPayment) + "\nTotal Payment: " + String.format("%.2f", totalPayment));

        for (int i = 1; i <= numberOfYears; i++) {

            interest = interestRate * loanAmount;
            principal = monthlyPayment - interest;
            totalPayment = loanAmount - principal;
            loanAmount = loanAmount - principal;
            System.out.println(i + "\t\t" + String.format("%.2f", interest)
                    + "\t\t" + String.format("%.2f", principal) + "\t\t" + String.format("%.2f", totalPayment));
        }
    }

}
--------------------------



#23 (Demonstrate cancellation errors) A cancellation error occurs when you are 
manipulating a very large number with a very small number. The large number 
may cancel out the smaller number. For example, the result of 100000000.0 
+ 0.000000001 is equal to 100000000.0. To avoid cancellation errors and 
obtain more accurate results, carefully select the order of computation. For example, in computing the following summation, you will obtain more accurate 
results by computing from right to left rather than from left to right:
1 +1/2+1/3+...+1/n
 Write a program that compares the results of the summation of the preceding 
series, computing from left to right and from right to left with n = 50000.
--------------------------
package com.company;


public class Main {
    public static void main(String[] args) {
        float rightToLeft = 0;
        float leftToRight = 0;

        for (float i = 1; i <= 50000; i++)
            leftToRight = leftToRight + 1 / i;

        for (float i = 50000; i >= 1; i--)
            rightToLeft = rightToLeft + 1 / i;

        System.out.println(rightToLeft);
        System.out.println(leftToRight);
        System.out.println(rightToLeft - leftToRight);
    }


}
--------------------------



#24 (Sum a series) Write a program to compute the following summation:
1/3+3/5+5/7+7/9+9/11+11/13+...+95/97+97/99
--------------------------
package com.company;


public class Main {
    public static void main(String[] args) {
        float result = 0;
       for (float i = 1; i <= 97; i+=2)
           result = result + i/(i+2);
        System.out.println(result);
    }
}
--------------------------



#25 (Compute p) You can approximate p by using the following summation:
p = 4(1 - 1/3+1/5-1/7+1/9-1/11+...+ (-)^(i+1)/(2i - 1))
 Write a program that displays the p value for i = 10000, 20000, …, and 100000.
--------------------------
package com.company;


public class Main {
    public static void main(String[] args) {
        float pi = 0;
       for (float i = 1; i <= 100000; i++)
           pi = pi + (float)Math.pow(-1,i+1)/(2*i-1);
       pi = pi*4;
        System.out.println(pi);
    }
}
--------------------------



#26 (Compute e) You can approximate e using the following summation:
e = 1+1/1!+1/2!+1/3!+1/4!+...+1/i!
 Write a program that displays the e value for i = 1, 2, …, and 20. Format 
the number to display 16 digits after the decimal point
--------------------------
package com.company;


public class Main {
    public static void main(String[] args) {
        float e = 1;
        float fact = 1;
        for (float i = 1; i <= 20; i++) {
            fact = i * fact;
            e = e + 1 / fact;
        }
        System.out.printf("%.16f%n", e);
    }
}
--------------------------



#27 (Display leap years) Write a program that displays all the leap years, 10 per line, 
from 101 to 2100, separated by exactly one space. Also display the number of 
leap years in this period.
--------------------------
package com.company;
//What is a leap year? To be a leap year, the year number must be divisible by four – except for end-of-century years, which must be divisible by 400. This means that the year 2000 was a leap year, although 1900 was not. 2020, 2024 and 2028 are all leap years.
public class Main {
    public static void main(String[] args) {
      for (int i = 101; i <=2100; i++){
          if((i%4==0 && i%100!=0) || i%400==0)
              System.out.print(i + " ");
      }
    }
}
--------------------------



#29 (Display calendars) Write a program that prompts the user to enter the year and 
first day of the year and displays the calendar table for the year on the console. For 
example, if the user entered the year 2013, and 2 for Tuesday, January 1, 2013, 
your program should display the calendar for each month in the year, as follows:
January 2013
_________________________
Sun	 Mon	 Tue	 Wed	 Thu	 Fri	 Sat
	 	 1	 2	 3	 4	 5
6 	 7	 8	 9	 10	 11	 12
13	 14	 15	 16	 17	 18	 19
20	 21	 22	 23	 24	 25	 26
27 	 28	 29	 30	 31
. . .
December 2013
________________________
Sun 	Mon	 Tue	 Wed	 Thu	 Fri	 Sat
1 	 2	 3	 4	 5	 6	 7
8	 9	 10	 11	 12	 13	 14
15	 16	 17	 18	 19	 20	 21
22	 23	 24	 25	 26	 27	 28
29	 30	 31
--------------------------
package com.company;

import java.util.Scanner;

public class Main {
    public static void main(String[] args) {
        String nameOfMonth = " ";
        Scanner input = new Scanner(System.in);
        System.out.print("Enter year:");
        int year = input.nextInt();
        int length;
        System.out.print("Enter day (1 for Monday, 2 for Tuesday and so on):");
        int day = input.nextInt();
        for (int month = 1; month <= 12; month++) {
            if (month == 2) {
                if ((year % 4 == 0 && year % 100 != 0) || (year % 400 == 0))
                    length = 29;
                else
                    length = 28;
            } else
                length = 30 + ((month + (int) (month / 8.0)) % 2);


            switch (month) {
                case 1 -> nameOfMonth = "January";
                case 2 -> nameOfMonth = "February";
                case 3 -> nameOfMonth = "March";
                case 4 -> nameOfMonth = "April";
                case 5 -> nameOfMonth = "May";
                case 6 -> nameOfMonth = "June";
                case 7 -> nameOfMonth = "July";
                case 8 -> nameOfMonth = "August";
                case 9 -> nameOfMonth = "September";
                case 10 -> nameOfMonth = "October";
                case 11 -> nameOfMonth = "November";
                case 12 -> nameOfMonth = "December";
                default -> {
                }
            }
            day = day % 7;
            System.out.println("\t\t\t\t" + nameOfMonth + "\t" + year + "\t\t");
            System.out.println("---------------------------------------------------");
            System.out.println("Sun\t\tMon\t\tTue\t\tWed\t\tThu\t\tFri\t\tSat");
            for (int i = 0; i < day; i++) {
                System.out.print("\t\t");
            }
            for (int j = 1; j <= length; j++) {
                System.out.print(j + "\t\t");
                if ((j + day) % 7 == 0) {
                    System.out.println();
                }
            }

            System.out.println("\n\n");
            day += length;
        }
    }
} 
--------------------------



#30 (Financial application: compound value) Write a program that prompts the user to enter an amount (e.g., 100), the annual interest rate (e.g., 5), and the number of months (e.g., 6) then displays the 
amount in the savings account after the given month.
--------------------------
package com.company;

import java.util.Scanner;

public class Main {
    public static void main(String[] args) {
        System.out.println("Enter the amount of money: ");
        Scanner input = new Scanner(System.in);
        double amount = input.nextDouble();
        System.out.println("Enter the annual interest rate: ");
        double intRate = input.nextDouble();
        System.out.println("Enter the number of months: ");
        double months = input.nextDouble();
        double monthlyIntRate = intRate / 1200;
        double balance = 0;
        for (int i = 1; i <= months; i++) {
            balance += amount;
            balance *= (monthlyIntRate + 1);
        }
        System.out.println(balance);
    }

}
--------------------------



#31 (Financial application: compute CD value) Write a program that prompts the user to enter an amount (e.g., 10000), the 
annual percentage yield (e.g., 5.75), and the number of months (e.g., 18) and 
displays a table
--------------------------
package com.company;

import java.util.Scanner;

public class Main {
    public static void main(String[] args) {
        System.out.println("Enter the amount of money: ");
        Scanner input = new Scanner(System.in);
        double amount = input.nextDouble();
        System.out.println("Enter the annual interest rate: ");
        double intRate = input.nextDouble();
        System.out.println("Enter the number of months: ");
        double months = input.nextDouble();
        double monthlyIntRate = intRate / 1200;
        System.out.println("Month\tCD value");
        for (int i = 1; i <= months; i++) {
            amount += amount * monthlyIntRate;
            System.out.printf("%d\t\t%.2f\n", i, amount);
        }
    }

}
--------------------------



#32 (Game: lottery) Revise Listing 3.8, Lottery.java, to generate a lottery of a two 
digit number. The two digits in the number are distinct.
--------------------------
package com.company;

public class Main {
    public static void main(String[] args) {
        int firstNum = (int) (Math.random() * 10);
        int secondNum;
        System.out.print(firstNum);
        do {
            secondNum = (int) (Math.random() * 10);
        }
        while (secondNum == firstNum);
        System.out.println(secondNum);
    }
}
--------------------------



#33 (Perfect number) A positive integer is called a perfect number if it is equal to the sum 
of all of its positive divisors, excluding itself. For example, 6 is the first perfect number because 6 = 3 + 2 + 1. The next is 28 = 14 + 7 + 4 + 2 + 1. There are 
four perfect numbers 6 10,000. Write a program to find all these four numbers
--------------------------
package com.company;

public class Main {
    public static void main(String[] args) {
        int sum;
        for (int perfectNumber = 1; perfectNumber < 10000; perfectNumber++) {
            sum = 0;
            for (int i = 1; i < perfectNumber; i++) {
                if (perfectNumber % i == 0)
                    sum += i;
            }
            if (perfectNumber == sum)
                System.out.println(perfectNumber);
        }
    }
}
--------------------------



#34 (Game: scissor, rock, paper) Programming Exercise 3.17 gives a program that 
plays the scissor–rock–paper game. Revise the program to let the user continuously play until either the user or the computer wins more than two times than its 
opponent
--------------------------
package com.company;

import java.util.Scanner;

public class Main {
    public static void main(String[] args) {
        Scanner input = new Scanner(System.in);
        System.out.println("Let us play the scissor-rock-paper game!");
        int player;
        int computer;
        int scoreOfPlayer = 0;
        int scoreOfComputer = 0;
        do {
            computer = (int) (Math.random() * 3);
            System.out.println("What is your move(0_scissor,1_rock,2_paper):");
            player = input.nextInt();
            if (computer == player + 1 || computer == player - 2) {
                System.out.println("The computer won this one");
                scoreOfComputer++;
            } else if (computer == player)
                System.out.println("It is a draw");
            else {
                System.out.println("You won this one");
                scoreOfPlayer++;
            }
            System.out.println("Your score:" + scoreOfPlayer + "\nComputer score:" + scoreOfComputer);

        }
        while ((scoreOfComputer < scoreOfPlayer + 2) && (scoreOfPlayer < scoreOfComputer + 2));

        if (scoreOfComputer > scoreOfPlayer)
            System.out.println("You lost :(((");
        else
            System.out.println("You won!!!");
    }
}
--------------------------



#35 (Summation) Write a program to compute the following summation:
1/(1 + sqrt(2))+1/(sqrt(2) + sqrt(3)) + 1/(sqrt(3) + sqrt(4)) + ... + 1/(sqrt(624) + sqrt(625))
--------------------------
package com.company;


public class Main {
    public static void main(String[] args) {
        double sum = 0;
        for (int i = 1; i < 624; i++)
            sum += 1 / (Math.sqrt(i) + Math.sqrt(i + 1));
        System.out.println(sum);
    }
}
--------------------------



#37 (Decimal to binary) Write a program that prompts the user to enter a decimal 
integer then displays its corresponding binary value.  Don’t use Java’s Integer.
toBinaryString(int) in this program 
--------------------------
package com.company;


import java.util.Scanner;

public class Main {
    public static void main(String[] args) {
        Scanner input = new Scanner(System.in);
        int decimal;
        String binary = "";
        System.out.println("enter a decimal integer to displays its corresponding binary value");
        decimal = input.nextInt();
        while(decimal != 0){
            binary = decimal%2+binary;
            decimal/=2;
        }
        System.out.println(binary);
    }
}
--------------------------



#38 (Decimal to octal) Write a program that prompts the user to enter a decimal 
integer and displays its corresponding octal value. Don’t use Java’s Integer.
toOctalString(int) in this program.
--------------------------
package com.company;


import java.util.Scanner;

public class Main {
    public static void main(String[] args) {
        Scanner input = new Scanner(System.in);
        int decimal;
        String binary = "";
        System.out.println("enter a decimal integer to displays its corresponding binary value");
        decimal = input.nextInt();
        while(decimal != 0){
            binary = decimal%8+binary;
            decimal/=8;
        }
        System.out.println(binary);
    }
}
--------------------------



#40 (Simulation: heads or tails) Write a program that simulates flipping a coin one 
million times and displays the number of heads and tails.
--------------------------
package com.company;


public class Main {
    public static void main(String[] args) {
        int numberOfHeads = 0;
        int numberOfTails = 0;
        int coinFlip;
        for (int i = 0; i < 1000000; i++) {
            coinFlip = (int) (Math.random() * 2);
            if (coinFlip == 0)
                numberOfHeads++;
            else
                numberOfTails++;
        }
        System.out.println("Heads: " + numberOfHeads + "\nTails: " + numberOfTails);
    }
}
--------------------------



#41 (Occurrence of max numbers) Write a program that reads integers, finds the largest of them, and counts its occurrences. Assume the input ends with number 0. 
Suppose you entered 3 5 2 5 5 5 0; the program finds that the largest is 5 and 
the occurrence count for 5 is 4. If no input is entered, display "No numbers are 
entered except 0".
--------------------------
package com.company;

import java.util.Scanner;

public class Main {
    public static void main(String[] args) {
        int max = 0;
        int count = 0;
        int number;
        Scanner input = new Scanner(System.in);
        System.out.println("Enter positive integers respectively (to stop the program type 0):");
        do {
            number = input.nextInt();
            if (number > max) {
                max = number;
                count = 1;
            } else if (number == max && number != 0)
                count++;
        }
        while (number != 0);
        if (count == 0)
            System.out.println("No numbers are entered except 0");
        else
            System.out.println("The largest number is " + max + "\nThe occurrence count of the largest number is " + count);
    }
}
--------------------------



#43 (Math: combinations) Write a program that displays all possible combinations 
for picking two numbers from integers 1 to 7. Also display the total number of 
all combinations.
1 2
1 3
...
...
The total number of all combinations is 21
--------------------------
package com.company;


public class Main {
    public static void main(String[] args) {
        int count = 0;
        for (int i = 1; i < 7; i++) {
            for (int k = i + 1; k <= 7; k++) {
                System.out.println(i + " " + k);
                count++;
            }
        }
        System.out.println("The total number of all combinations is " + count);
    }
}
--------------------------



#45 (Statistics: compute mean and standard deviation) In business applications, you 
are often asked to compute the mean and standard deviation of data.
--------------------------
package com.company;


import java.util.Scanner;

public class Main {
    public static void main(String[] args) {
        double mean;
        double deviation;
        double sum = 0;
        double sumOfSquare = 0;
        int n = 10;
        Scanner input = new Scanner(System.in);
        double num;
        System.out.println("Enter 10 numbers: ");
        for (int i = 1; i <= n; i++) {
            num = input.nextDouble();
            sum += num;
            sumOfSquare += (num * num);
        }
        mean = sum / n;
        deviation = Math.sqrt((sumOfSquare - sum * sum / n) / (n - 1));
        System.out.println("The mean is " + mean + "\nThe standard deviation is " + String.format("%.5f", deviation));
    }
}
--------------------------



#46 (Reverse a string) Write a program that prompts the user to enter a string and 
displays the string in reverse order.
--------------------------
package com.company;


import java.util.Scanner;

public class Main {
    public static void main(String[] args) {
        String word;
        String reverseOfWord = "";
        Scanner input = new Scanner(System.in);
        System.out.println("Enter a string to display it in reverse order: ");
        word = input.nextLine();
        for (int i = 0; i < word.length(); i++) {
            reverseOfWord = word.charAt(i) + reverseOfWord;
        }
        System.out.println("Reversed: " + reverseOfWord);
    }
}
--------------------------



#47 (Process string) Write a program that prompts the user to enter a string and displays 
the characters at odd positions. Here is a sample run:
--------------------------
package com.company;


import java.util.Scanner;

public class Main {
    public static void main(String[] args) {
        String word;
        String oddPositions = "";
        Scanner input = new Scanner(System.in);
        System.out.println("Enter a string: ");
        word = input.nextLine();
        for (int i = 0; i < word.length(); i += 2) {
            oddPositions = oddPositions + word.charAt(i);
        }
        System.out.println(oddPositions);
    }
}
--------------------------



#49 (Count vowels and consonants) Assume that the letters A, E, I, O, and U are vowels.
 Write a program that prompts the user to enter a string, and displays the 
number of vowels and consonants in the string.
--------------------------
package com.company;


import java.util.Scanner;

public class Main {
    public static void main(String[] args) {
        int numberOfVowels = 0;
        int numberOfConsonants = 0;
        String word;
        Scanner input = new Scanner(System.in);
        System.out.println("Enter a string: ");
        word = input.nextLine();
        for (int i = 0; i < word.length(); i++) {

            if (word.charAt(i) == 'o' || word.charAt(i) == 'O' || word.charAt(i) == 'a' || word.charAt(i) == 'A' || word.charAt(i) == 'e' || word.charAt(i) == 'E' || word.charAt(i) == 'i' || word.charAt(i) == 'I' || word.charAt(i) == 'u' || word.charAt(i) == 'U') {
                numberOfVowels++;
            } else if (word.charAt(i) != ' ')
                numberOfConsonants++;
        }

        System.out.println("vowels: " + numberOfVowels + "\nconsonants: " + numberOfConsonants);
    }
}
--------------------------



#50 (Count uppercase letters) Write a program that prompts the user to enter a string 
and displays the number of the uppercase letters in the string.
--------------------------
package com.company;


import java.util.Scanner;

public class Main {
    public static void main(String[] args) {
        int numberOfUppercase = 0;
        String word;
        Scanner input = new Scanner(System.in);
        System.out.println("Enter a string: ");
        word = input.nextLine();
        for (int i = 0; i < word.length(); i++) {

            if (Character.isUpperCase(word.charAt(i)))
                numberOfUppercase++;
        }
        System.out.println("The number of uppercase letters is " + numberOfUppercase);
    }
}
--------------------------



#51 Longest common prefix) Write a program that prompts the user to enter two 
strings and displays the largest common prefix of the two strings. Here are some 
sample runs:
--------------------------
package com.company;

import java.util.Scanner;

public class Main {
    public static void main(String[] args) {
        int index = 0;
        String prefix = "";
        Scanner input = new Scanner(System.in);
        System.out.print("Enter the first string: ");
        String word1 = input.nextLine();
        System.out.print("Enter the second string: ");
        String word2 = input.nextLine();
        while (word1.charAt(index) == word2.charAt(index)) {
            prefix = prefix + word1.charAt(index);
            index++;
        }
        if (prefix.length() > 0)
            System.out.println("The commmon prefix is " + prefix);
        else
            System.out.println(word1 + " and " + word2 +
                    " have no commmon prefix");
    }
}
--------------------------



--------------------------------------------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------------------------------------------
Chapter 7-----------------------------------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------------------------------------------



#1 (Assign grades) Write a program that reads student scores, gets the best score, and 
then assigns grades based on the following scheme:
Grade is A if score is >= best -10;
Grade is B if score is >= best -20;
Grade is C if score is >= best -30;
Grade is D if score is >= best -40;
Grade is F otherwise.
 The program prompts the user to enter the total number of students, then prompts 
the user to enter all of the scores, and concludes by displaying the grades
--------------------------
package com.company;

import java.util.Scanner;

public class Main {
    public static void main(String[] args) {
        int numberOfStudents;
        double max = 0;
        char grade;
        Scanner input = new Scanner(System.in);
        System.out.print("Enter the number of students: ");
        numberOfStudents = input.nextInt();
        double[] listOfgrades = new double[numberOfStudents];
        System.out.print("Enter " + numberOfStudents + " scores: ");
        for (int i = 0; i < numberOfStudents; i++) {
            listOfgrades[i] = input.nextDouble();
            if (listOfgrades[i] > max)
                max = listOfgrades[i];
        }
        for (int i = 0; i < numberOfStudents; i++) {
            System.out.println();
            System.out.print("Student " + i + " score is " + listOfgrades[i] + " and the grade is ");
            if (listOfgrades[i] >= max - 10)
                grade = 'A';
            else if (listOfgrades[i] >= max - 20)
                grade = 'B';
            else if (listOfgrades[i] >= max - 30)
                grade = 'C';
            else if (listOfgrades[i] >= max - 40)
                grade = 'D';
            else
                grade = 'F';
            System.out.println(grade);
        }
    }
}
--------------------------



#3 (Count occurrence of numbers) Write a program that reads the integers between
1 and 100 and counts the occurrences of each. Assume the input ends with 0. Here 
is a sample run of the program: Note that if a number occurs more than one time, the 
plural word “times” is used in the output. Numbers are displayed in increasing order.
--------------------------
package com.company;

import java.util.Scanner;

public class Main {
    public static void main(String[] args) {
        Scanner input = new Scanner(System.in);
        int[] arr = new int[100];
        int i = 0;
        int assign;
	  System.out.println("Enter the integers between 1 and 100: ");
        do {
            assign = input.nextInt();
            arr[i] = assign;
            i++;
        }
        while (assign != 0);
        for (int k = 1; k <= 100; k++) {
            int occur = 0;
            for (int j = 0; j < arr.length; j++) {
                if (k == arr[j])
                    occur++;
            }
            if (occur != 0)
                if (occur > 1)
                    System.out.println(k + " occurs " + occur + " times");
                else
                    System.out.println(k + " occurs " + occur + " time");
        }
    }
}
--------------------------



#5 (Print distinct numbers) Write a program that reads in 10 numbers and displays the 
number of distinct numbers and the distinct numbers in their input order and separated by exactly one space (i.e., if a number appears multiple times, it is displayed 
only once)
--------------------------
package com.company;

import java.util.Scanner;

public class Main {
    public static void main(String[] args) {
        Scanner input = new Scanner(System.in);
        int[] arr = new int[10];
        int number;
        int numberOfDistinct = 0;
        int index = 0;
        System.out.print("Enter 10 numbers: ");
        for (int i = 1; i <= arr.length; i++) {
            int occurence = 0;
            number = input.nextInt();
            for (int k = 0; k < i; k++) {
                if (arr[k] == number)
                    occurence++;
            }
            if (occurence == 0) {
                numberOfDistinct++;
                arr[index] = number;
                index++;
            }
        }
        System.out.print("\nThe number of distinct numbers is " + numberOfDistinct + "\nThe distinct numbers are: ");
        for (int i = 0; i < numberOfDistinct; i++)
            System.out.print(arr[i] + " ");
    }
}
--------------------------



#7 (Count single digits) Write a program that generates 100 random integers between 
0 and 9 and displays the count for each number. 
--------------------------
package com.company;

public class Main {
    public static void main(String[] args) {
        int myRandom;
        int[] counts = new int[10];
        for (int i = 0; i < 100; i++) {
            myRandom = (int) (Math.random() * 10);
            counts[myRandom]++;
        }
        for (int i = 0; i < counts.length; i++)
            System.out.println("There are " + counts[i] + " of " + i);
    }
}
--------------------------



#9 Find the smallest element) Write a method that finds the smallest element in an 
array of double values using the following header:

public static double min(double[] array)

 Write a test program that prompts the user to enter 10 numbers, invokes this 
method to return the minimum value, and displays the minimum value.
--------------------------
package com.company;

import java.util.Scanner;

public class Main {
    public static void main(String[] args) {
        Scanner input = new Scanner(System.in);
        double[] arr = new double[10];
        System.out.println("Enter 10 numbers: ");
        for(int i = 0; i<arr.length; i++)
            arr[i] = input.nextDouble();
        System.out.println("The minimum number is " + min(arr));
    }

    public static double min(double[] array){
        double smallest = array[0];
        for (int i = 1; i< array.length; i++)
            if (smallest > array[i])
                smallest = array[i];
        return smallest;
    }
}
--------------------------



#11 Compute the standard deviation with this formula, you have to store the individual
numbers using an array, so they can be used after the mean is obtained.
 Your program should contain the following methods:

/** Compute the deviation of double values */
public static double deviation(double[] x)

/** Compute the mean of an array of double values */
public static double mean(double[] x)

 Write a test program that prompts the user to enter 10 numbers and displays the 
mean and standard deviation, as presented in the following sample run:
--------------------------
package com.company;

import java.util.Scanner;

public class Main {
    public static void main(String[] args) {
        Scanner input = new Scanner(System.in);
        double[] arr = new double[10];
        int n = 10;
        System.out.print("Enter 10 numbers: ");
        for (int i = 0; i < 10; i++)
            arr[i] = input.nextDouble();
        System.out.println("The mean is " + String.format("%.2f", mean(arr)) + "\nThe standard deviation is " + String.format("%.5f", deviation(arr, n)));
    }

    public static double mean(double[] array) {
        double sum = 0;
        for (int i = 0; i < array.length; i++)
            sum += array[i];
        return sum / 10;
    }

    public static double deviation(double[] array, int n) {
        double sum = 0;
        for (int i = 0; i < array.length; i++)
            sum += Math.pow(array[i] - mean(array), 2);
        return Math.sqrt(sum / (n - 1));
    }
}
--------------------------



#13 (Random number chooser) Write the following method that returns a random 
number between start and end, excluding the numbers. 

public static int getRandom(int start, int end, int... numbers)

For example, invoking getRandom(1,100,4,8,95,93) returns a random number between 1 and 100 excluding 4,8,95,and 93. Write a test program that 
invokes getRandom(1,100,4,8,95,93) 45 times and displays the resulting 
numbers 15 per line
--------------------------
package com.company;

import java.util.Scanner;

public class Main {
    public static void main(String[] args) {
        int min;
        int max;
        int lengthOfArray;
        Scanner input = new Scanner(System.in);
        System.out.println("How many numbers do you want to exclude: ");
        lengthOfArray = input.nextInt();
        int[] arr = new int[lengthOfArray];
        System.out.println("Enter the limits of random number (minimum, maximum respectively): ");
        min = input.nextInt();
        max = input.nextInt();
        System.out.println("Which possible numbers would you like to exclude: ");
        for (int i = 0; i < lengthOfArray; i++)
            arr[i] = input.nextInt();
        System.out.println("Here are the generated random numbers");
        for (int i = 1; i <= 45; i++) {
            System.out.print(getRandom(min, max, arr) + " ");
            if (i % 15 == 0)
                System.out.println();
        }
    }

    public static int getRandom(int start, int end, int[] array) {
        boolean b;
        int myRandom;
        do {
            b = true;
            myRandom = (int) (Math.random() * (end - start + 1) + start);
            for (int i = 0; i < array.length; i++) {
                if (myRandom == array[i]) {
                    b = false;
                    break;
                }
            }
        }
        while (!b);
        return myRandom;
    }
}
--------------------------



#15 (Eliminate duplicates) Write a method that returns a new array by eliminating the 
duplicate values in the array using the following method header:

public static int[] eliminateDuplicates(int[] list)

Write a test program that reads in 10 integers, invokes the method, and displays 
the distinct numbers separated by exactly one space.
--------------------------
package com.company;

import java.util.Scanner;

public class Main {
    public static void main(String[] args) {
        Scanner input = new Scanner(System.in);
        int[] arr = new int[10];

        System.out.print("Enter 10 numbers: ");
        for (int i = 0; i < arr.length; i++)
            arr[i] = input.nextInt();
        System.out.print("The distinct numbers are: ");
        for (int i = 0; i < eliminateDuplicates(arr).length; i++)
            System.out.print(eliminateDuplicates(arr)[i] + " ");

    }

    public static int[] eliminateDuplicates(int[] list) {
        int[] distinct = new int[10];
        int index = 1;
        distinct[0] = list[0];
        for (int i = 1; i < distinct.length; i++) {
            int occurence = 0;
            for (int k = 0; k < i; k++) {
                if (list[i] == list[k])
                    occurence++;
            }
            if (occurence == 0) {
                distinct[index] = list[i];
                index++;
            }
        }
        return distinct;
    }
}
--------------------------



#17 (Sort students) Write a program that prompts the user to enter the number of 
students, the students’ names, and their scores and prints student names in decreasing 
order of their scores. Assume the name is a string without spaces, use the 
Scanner’s next() method to read a name
--------------------------
package com.company;

import java.util.Scanner;

public class Main {
    public static void main(String[] args) {
        int numberOfStudents;
        Scanner input = new Scanner(System.in);
        numberOfStudents = input.nextInt();
        double[] notes = new double[numberOfStudents];
        String[] names = new String[numberOfStudents];
        System.out.println("Enter the name and score respectively:");
        for (int i = 0; i < numberOfStudents; i++) {
            names[i] = input.next();
            notes[i] = input.nextDouble();
        }
        for (int i = 0; i < notes.length; i++) {
            for (int k = i + 1; k < notes.length; k++) {
                double sortForNotes;
                String sortForNames;
                if (notes[i] > notes[k]) {
                    sortForNotes = notes[i];
                    sortForNames = names[i];
                    notes[i] = notes[k];
                    names[i] = names[k];
                    notes[k] = sortForNotes;
                    names[k] = sortForNames;
                }
            }
        }
        System.out.println("In decreasing order:");
        for (int i = notes.length - 1; i >= 0; i--) {
            System.out.println(names[i] + " " + notes[i]);
        }

    }
}
--------------------------



#19 (Sorted?) Write the following method that returns true if the list is already sorted 
in nondecreasing order:
public static boolean isSorted(int[] list)
 Write a test program that prompts the user to enter a list and displays whether the 
list is sorted or not. Here is a sample run. Note that the program first prompts the 
user to enter the size of the list.

Enter the size of the list: 8
Enter the contents of the list: 10 1 5 16 61 9 11 1
The list has 8 integers 10 1 5 16 61 9 11 1
The list is not sorted

Enter the size of the list: 10 
Enter the contents of the list: 1 1 3 4 4 5 7 9 11 21
The list has 10 integers 1 1 3 4 4 5 7 9 11 21
The list is already sorted
--------------------------
package com.company;

import java.util.Scanner;

public class Main {
    public static void main(String[] args) {
        Scanner input = new Scanner(System.in);
        int size;
        System.out.print("Enter the size of the list: ");
        size = input.nextInt();
        int[] arr = new int[size];
        System.out.print("Enter the contents of the list: ");
        for (int i = 0; i < size; i++)
            arr[i] = input.nextInt();
        System.out.print("The list has " + size + " integers ");
        if (isSorted(arr))
            System.out.println("\nThe list is sorted");
        else
            System.out.println("\nThe list is not sorted");
    }

    public static boolean isSorted(int[] list) {
        boolean b = true;
        for (int i = 0; i < list.length; i++) {
            System.out.print(list[i] + " ");
            if (i < list.length - 1 && list[i] > list[i + 1])
                b = false;
        }
        return b;
    }
}
--------------------------



#21 (Sum integers) Write a program that passes an unspecified number of integers from 
command line and displays their total.
--------------------------
package com.company;

import java.util.Scanner;

public class Main {
    public static void main(String[] args) {
        int sum = 0;
        Scanner input = new Scanner(System.in);
        System.out.print("Enter the number of integers: ");
        int n = input.nextInt();
        int[] arr = new int[n];
        System.out.print("Enter the elements: ");
        for (int i = 0; i < arr.length; i++) {
            arr[i] = input.nextInt();
            sum += arr[i];
        }
        System.out.println("The sum of all integers is " + sum);
    }
}
--------------------------



#23 (Game: locker puzzle) A school has 100 lockers and 100 students. All lockers are 
closed on the first day of school. As the students enter, the first student, denoted 
as S1, opens every locker. Then the second student, S2, begins with the second 
locker, denoted as L2, and closes every other locker. Student S3 begins with the 
third locker and changes every third locker (closes it if it was open and opens it if 
it was closed). Student S4 begins with locker L4 and changes every fourth locker. 
Student S5 starts with L5 and changes every fifth locker, and so on, until student 
S100 changes L100.
 After all the students have passed through the building and changed the lockers, 
which lockers are open? Write a program to find your answer and display all open 
locker numbers separated by exactly one space.
 (Hint: Use an array of 100 Boolean elements, each of which indicates whether a 
locker is open (true) or closed (false). Initially, all lockers are closed.)
--------------------------
package com.company;

public class Main {
    public static void main(String[] args) {
       boolean[] locker = new boolean[100];
       for (int i = 0; i< locker.length; i++){
           for (int k = i; k< locker.length; k = k+i+1)
               locker[k] = !locker[k];
       }
        System.out.println("The open lockers are: ");
       for (int i =0; i< locker.length; i++)
           if (locker[i])
               System.out.println((i+1) + " ");
    }
}
--------------------------



#25 (Algebra: solve quadratic equations) Write a method for solving a quadratic equation using the following header:
public static int solveQuadratic(double[] eqn, double[] roots)
Write a program that prompts the user to enter values for a, b, and c and displays 
the number of real roots and all real roots.
--------------------------
package com.company;

import java.util.Scanner;

public class Main {
    public static void main(String[] args) {
        double[] eqn = new double[3];
        double[] roots = new double[2];
        Scanner input = new Scanner(System.in);
        int number;
        System.out.println("a * x^2 + b*x + c: Enter a,b,c respectively");
        for (int i = 0; i < eqn.length; i++)
            eqn[i] = input.nextInt();

        number = solveQuadratic(eqn, roots);
        for (int i = 0; i < number; i++)
            System.out.println(roots[i]);


    }

    public static int solveQuadratic(double[] eqn, double[] roots) {
        int numberOfRoots;
        double discriminant = eqn[1] * eqn[1] - 4 * eqn[0] * eqn[2];
        if (discriminant == 0)
            numberOfRoots = 1;
        else if (discriminant < 0)
            numberOfRoots = 0;
        else
            numberOfRoots = 2;
        for (int i = 0; i < numberOfRoots; i++)
            roots[i] = (-eqn[1] - Math.pow(-1, i) * Math.sqrt(discriminant)) / (2 * eqn[0]);
        System.out.println("The number of routs is " + numberOfRoots);
        return numberOfRoots;
    }

}
--------------------------



#26 (Strictly identical arrays) The arrays list1 and list2 are strictly identical
if their corresponding elements are equal. Write a method that returns true if 
list1 and list2 are strictly identical, using the following header:
public static boolean equals(int[] list1, int[] list2)
 Write a test program that prompts the user to enter two lists of integers and displays 
whether the two are strictly identical. Here are the sample runs. Note the first 
number in the input for each list indicates the number of the elements in the list. This 
number is not part of the list.

Enter list1 size and contents: 5 2 5 6 1 6
Enter list2 size and contents: 5 2 5 6 1 6
Two lists are strictly identical

Enter list1 size and contents: 5 2 5 6 6 1
Enter list2 size and contents: 5 2 5 6 1 6
Two lists are not strictly identical
--------------------------
package com.company;

import java.util.Scanner;

public class Main {
    public static void main(String[] args) {
        int size;
        Scanner input = new Scanner(System.in);
        System.out.print("Enter list1 size and contents: ");
        size = input.nextInt();
        int[] list1 = new int[size];
        for (int i = 0; i < list1.length; i++)
            list1[i] = input.nextInt();
        System.out.print("Enter list1 size and contents: ");
        size = input.nextInt();
        int[] list2 = new int[size];
        for (int i = 0; i < list2.length; i++)
            list2[i] = input.nextInt();

        if (equals(list1, list2))
            System.out.println("Two lists are strictly identical");
        else
            System.out.println("Two lists are not strictly identical");
    }

    public static boolean equals(int[] list1, int[] list2) {
        boolean b = true;
        for (int i = 0; i < list1.length; i++) {
            if (list1[i] != list2[i]) {
                b = false;
                break;
            }
        }
        return b;
    }

}
--------------------------



#27 (Identical arrays) The arrays list1 and list2 are identical if they have the same 
contents. Write a method that returns true if list1 and list2 are identical, 
using the following header:
public static boolean equals(int[] list1, int[] list2)
 Write a test program that prompts the user to enter two lists of integers and displays whether the two are identical. Here are the sample runs. Note the first number in the input for each list indicates the number of the elements in the list. This 
number is not part of the list

Enter list1 size and contents: 5 2 5 6 6 1
Enter list2 size and contents: 5 5 2 6 1 6
Two lists are identical

Enter list1: 5 5 5 6 6 1 
Enter list2: 5 2 5 6 1 6
Two lists are not identical
--------------------------
package com.company;

import java.util.Scanner;

public class Main {
    public static void main(String[] args) {
        int size;
        Scanner input = new Scanner(System.in);
        System.out.print("Enter list1 size and contents: ");
        size = input.nextInt();
        int[] list1 = new int[size];
        for (int i = 0; i < list1.length; i++)
            list1[i] = input.nextInt();
        System.out.print("Enter list1 size and contents: ");
        size = input.nextInt();
        int[] list2 = new int[size];
        for (int i = 0; i < list2.length; i++)
            list2[i] = input.nextInt();
        sorting(list1);
        sorting(list2);
        if (equals(list1, list2))
            System.out.println("Two lists are identical");
        else
            System.out.println("Two lists are not identical");
    }

    public static boolean equals(int[] list1, int[] list2) {
        boolean b = true;
        for (int i = 0; i < list1.length; i++) {
            if (list1[i] != list2[i]) {
                b = false;
                break;
            }
        }
        return b;
    }

    public static void sorting(int[] list) {
        for (int i = 0; i < list.length; i++) {
            for (int j = i + 1; j < list.length; j++) {
                int temp;
                if (list[j] < list[i]) {
                    temp = list[i];
                    list[i] = list[j];
                    list[j] = temp;
                }
            }
        }
    }
}
--------------------------



#29 (Game: pick four cards) Write a program that picks four cards from a deck of 52 
cards and computes their sum. An Ace, King, Queen, and Jack represent 1, 13, 12, 
and 11, respectively. Your program should display the number of picks that yields 
the sum of 24.
--------------------------
package com.company;

public class Main {
    public static void main(String[] args) {
        int numberOfPick = 0;
        int sum;
        do {
            sum = 0;
            for (int i = 0; i < 4; i++)
                sum += (int) (Math.random() * 52) + 1;
            numberOfPick++;
        }
        while (sum != 24);
        System.out.println("The number of picks that yields the sum of 24 is " + numberOfPick);
    }
}
--------------------------



#31 (Merge two sorted lists) Write the following method that merges two sorted lists 
into a new sorted list:

public static int[] merge(int[] list1, int[] list2)

 Implement the method in a way that takes at most list1.length + list2.
length comparisons. See liveexample.pearsoncmg.com/dsanimation/
MergeSortNeweBook.html for an animation of the implementation. Write a test 
program that prompts the user to enter two sorted lists and displays the merged 
list. Here is a sample run. Note the first number in the input indicates the number 
of the elements in the list. This number is not part of the list.

Enter list1 size and contents: 5 1 5 16 61 111
Enter list2 size and contents: 4 2 4 5 6
list1 is 1 5 16 61 111
list2 is 2 4 5 6
The merged list is 1 2 4 5 5 6 16 61 111
--------------------------
package com.company;

import java.util.Scanner;

public class Main {
    public static void main(String[] args) {
        int size;
        Scanner input = new Scanner(System.in);
        System.out.print("Enter list1 size and contents: ");
        size = input.nextInt();
        int[] list1 = new int[size];
        for (int i = 0; i < list1.length; i++)
            list1[i] = input.nextInt();
        System.out.print("Enter list1 size and contents: ");
        size = input.nextInt();
        int[] list2 = new int[size];
        for (int i = 0; i < list2.length; i++)
            list2[i] = input.nextInt();

        for (int i = 0; i < list1.length + list2.length; i++)
            System.out.print(sorting(merge(list1, list2))[i] + " ");
    }

    public static int[] merge(int[] list1, int[] list2) {
        int[] merged = new int[list1.length + list2.length];
        int index = 0;
        for (int i = 0; i < list1.length; i++) {
            merged[index] = list1[i];
            index++;
        }
        for (int i = 0; i < list2.length; i++) {
            merged[index] = list2[i];
            index++;
        }
        return merged;
    }

    public static int[] sorting(int[] list) {
        for (int i = 0; i < list.length; i++) {
            for (int j = i + 1; j < list.length; j++) {
                int temp;
                if (list[j] < list[i]) {
                    temp = list[i];
                    list[i] = list[j];
                    list[j] = temp;
                }
            }
        }
        return list;
    }
}
--------------------------



#33 (Culture: Chinese Zodiac) Simplify Listing 3.9 using an array of strings to store 
the animal names
--------------------------
package com.company;

import java.util.Scanner;

public class Main {
    public static void main(String[] args) {
        String[] chineseZodiac = {"monkey", "rooster", "dog", "pig", "rat", "ox",
                "tiger", "rabbit", "dragon", "snake", "horse", "sheep",};
        Scanner input = new Scanner(System.in);
        System.out.print("Enter a year: ");
        int index = input.nextInt() % 12;

        System.out.println("The zodiac sign is " + chineseZodiac[index]);
    }
}
--------------------------



--------------------------------------------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------------------------------------------
Chapter 8-----------------------------------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------------------------------------------



#1 (Sum elements column by column) Write a method that returns the sum of all the 
elements in a specified column in a matrix using the following header:
public static double sumColumn(double[][] m, int columnIndex)
 Write a test program that reads a 3-by-4 matrix and displays the sum of each 
column. Here is a sample run:

Enter a 3−by−4 matrix row by row:
1.5 2 3 4
5.5 6 7 8
9.5 1 3 1
Sum of the elements at column 0 is 16.5
Sum of the elements at column 1 is 9.0
Sum of the elements at column 2 is 13.0
Sum of the elements at column 3 is 13.0
--------------------------
package com.company;

import java.util.Scanner;

public class Main {
    public static void main(String[] args) {
        Scanner input = new Scanner(System.in);
        double[][] matrix = new double[3][4];
        for (int i = 0; i < 3; i++) {
            for (int k = 0; k < 4; k++)
                matrix[i][k] = input.nextDouble();
        }
        for (int i = 0; i < 4; i++)
            System.out.println("Sum of elements at column " + i + " is " + sumColumn(matrix, i));
    }

    public static double sumColumn(double[][] m, int columnIndex) {
        double sum = 0;
        for (int k = 0; k < 3; k++)
            sum += m[k][columnIndex];
        return sum;
    }
}
--------------------------



#2 (Sum the major diagonal in a matrix) Write a method that sums all the numbers 
in the major diagonal in an n * n matrix of double values using the following 
header:
public static double sumMajorDiagonal(double[][] m)
 Write a test program that reads a 4-by-4 matrix and displays the sum of all its 
elements on the major diagonal. Here is a sample run:

Enter a 4−by−4 matrix row by row:
1 2 3 4.0
5 6.5 7 8
9 10 11 12
13 14 15 16
Sum of the elements in the major diagonal is 34.5
--------------------------
package com.company;

import java.util.Scanner;

public class Main {
    public static void main(String[] args) {
        Scanner input = new Scanner(System.in);
        double[][] matrix = new double[4][4];
        for (int i = 0; i < 4; i++) {
            for (int k = 0; k < 4; k++)
                matrix[i][k] = input.nextDouble();
        }
        System.out.println("Sum of elements in the major diagonal is " + sumDiagonal(matrix));
    }

    public static double sumDiagonal(double[][] m) {
        double sum = 0;
        for (int k = 0; k < 4; k++)
            sum += m[k][k];
        return sum;
    }
}
--------------------------



#4 (Compute the weekly hours for each employee) Suppose the weekly hours for all 
employees are stored in a two-dimensional array. Each row records an employee’s seven-day work hours with seven columns. For example, the following array 
stores the work hours for eight employees. Write a program that displays employees and their total hours in decreasing order of the total hours.
	   	S M T W T F Sa
Employee 0	2 4 3 4 5 8 8
Employee 1  7 3 4 3 3 4 4
Employee 2  3 3 4 3 3 2 2
Employee 3  9 3 4 7 3 4 1
Employee 4  3 5 4 3 6 3 8
Employee 5  3 4 4 6 3 4 4
Employee 6  3 7 4 8 3 8 4
Employee 7  6 3 5 9 2 7 9
--------------------------
package com.company;

import java.util.Scanner;

public class Main {
    public static void main(String[] args) {
        Scanner input = new Scanner(System.in);
        double[][] matrix = new double[8][7];
        System.out.println("Enter the weekly hours for each employee");
        for (int i = 0; i < 8; i++) {
            for (int k = 0; k < 7; k++)
                matrix[i][k] = input.nextDouble();

        }
        for (int i = 7; i>=0; i--){
            System.out.print("Employee ");
            for (int j = 0; j<2;j++)
                System.out.print(selectionSort(sum(matrix))[i][j] + " ");
            System.out.println();
        }


    }

    public static int[][] sum(double[][] m) {
        int[][] sumOfHours = new int[m.length][2];
        for (int i = 0; i < 8; i++) {
            sumOfHours[i][0] = i;
            for (int k = 0; k < 7; k++)
                sumOfHours[i][1] += m[i][k];
        }

        return sumOfHours;
    }

    public static int[][] selectionSort(int[][] list) {
        for (int i = 0; i < list.length; i++) {
            for (int j = i + 1; j < list.length; j++) {
                int temp;
                if (list[j][1] < list[i][1])
                    for (int k = 0; k < 2; k++) {
                        temp = list[i][k];
                        list[i][k] = list[j][k];
                        list[j][k] = temp;
                    }
            }
        }
        return list;
    }
}
--------------------------



#5 (Algebra: add two matrices) Write a method to add two matrices. The header of 
the method is as follows:
public static double[][] addMatrix(double[][] a, double[][] b)
 In order to be added, the two matrices must have the same dimensions and the 
same or compatible types of elements. Let c be the resulting matrix. Each element 
Cij is Aij + Bij

--------------------------
package com.company;

import java.util.Scanner;

public class Main {
    public static void main(String[] args) {
        double[][] a = new double[3][3];
        double[][] b = new double[3][3];

        Scanner input = new Scanner(System.in);
        System.out.println("Enter the elements of the first matrix:");
        for (int i = 0; i < a.length; i++) {
            for (int j = 0; j < a[0].length; j++)
                a[i][j] = input.nextDouble();
        }
        System.out.println("Enter the elements of the second matrix:");
        for (int i = 0; i < b.length; i++) {
            for (int j = 0; j < b[0].length; j++)
                b[i][j] = input.nextDouble();
        }
        System.out.println("The matrices are added as follows");
        for (int i = 0; i < addMatrix(a, b).length; i++) {
            for (int j = 0; j < addMatrix(a, b)[0].length; j++) {
                System.out.print(a[i][j]);
                if (i == 1 && j == 2) {
                    System.out.print(" + ");
                } else if (i != 1 && j == 2) {
                    System.out.print("   ");
                } else
                    System.out.print(" ");
            }
            for (int j = 0; j < addMatrix(a, b)[0].length; j++) {
                System.out.print(b[i][j]);
                if (i == 1 && j == 2) {
                    System.out.print(" = ");
                } else if (i != 1 && j == 2) {
                    System.out.print("   ");
                } else
                    System.out.print(" ");
            }
            for (int j = 0; j < addMatrix(a, b)[0].length; j++) {
                System.out.print(addMatrix(a, b)[i][j] + " ");
            }
            System.out.println();
        }

    }

    public static double[][] addMatrix(double[][] a, double[][] b) {
        double[][] c = new double[3][3];
        for (int i = 0; i < c.length; i++) {
            for (int j = 0; j < c[0].length; j++)
                c[i][j] = a[i][j] + b[i][j];
        }
        return c;
    }
}

--------------------------
